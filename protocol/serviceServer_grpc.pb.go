// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	SignIn(ctx context.Context, in *SignInUserRequest, opts ...grpc.CallOption) (*Tokens, error)
	AddUser(ctx context.Context, in *SignUpUserRequest, opts ...grpc.CallOption) (*SignUpUserResponse, error)
	GetAllUser(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAllUsersResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*Empty, error)
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*Tokens, error)
	UploadImage(ctx context.Context, opts ...grpc.CallOption) (UserService_UploadImageClient, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) SignIn(ctx context.Context, in *SignInUserRequest, opts ...grpc.CallOption) (*Tokens, error) {
	out := new(Tokens)
	err := c.cc.Invoke(ctx, "/protobuf.UserService/SignIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddUser(ctx context.Context, in *SignUpUserRequest, opts ...grpc.CallOption) (*SignUpUserResponse, error) {
	out := new(SignUpUserResponse)
	err := c.cc.Invoke(ctx, "/protobuf.UserService/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetAllUser(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAllUsersResponse, error) {
	out := new(GetAllUsersResponse)
	err := c.cc.Invoke(ctx, "/protobuf.UserService/GetAllUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, "/protobuf.UserService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, "/protobuf.UserService/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protobuf.UserService/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*Tokens, error) {
	out := new(Tokens)
	err := c.cc.Invoke(ctx, "/protobuf.UserService/RefreshToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UploadImage(ctx context.Context, opts ...grpc.CallOption) (UserService_UploadImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[0], "/protobuf.UserService/UploadImage", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceUploadImageClient{stream}
	return x, nil
}

type UserService_UploadImageClient interface {
	Send(*UploadImageRequest) error
	CloseAndRecv() (*UploadImageResponse, error)
	grpc.ClientStream
}

type userServiceUploadImageClient struct {
	grpc.ClientStream
}

func (x *userServiceUploadImageClient) Send(m *UploadImageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userServiceUploadImageClient) CloseAndRecv() (*UploadImageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadImageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	SignIn(context.Context, *SignInUserRequest) (*Tokens, error)
	AddUser(context.Context, *SignUpUserRequest) (*SignUpUserResponse, error)
	GetAllUser(context.Context, *Empty) (*GetAllUsersResponse, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*Empty, error)
	RefreshToken(context.Context, *RefreshTokenRequest) (*Tokens, error)
	UploadImage(UserService_UploadImageServer) error
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) SignIn(context.Context, *SignInUserRequest) (*Tokens, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (UnimplementedUserServiceServer) AddUser(context.Context, *SignUpUserRequest) (*SignUpUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedUserServiceServer) GetAllUser(context.Context, *Empty) (*GetAllUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUser not implemented")
}
func (UnimplementedUserServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUserServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserServiceServer) RefreshToken(context.Context, *RefreshTokenRequest) (*Tokens, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedUserServiceServer) UploadImage(UserService_UploadImageServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadImage not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.UserService/SignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SignIn(ctx, req.(*SignInUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.UserService/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddUser(ctx, req.(*SignUpUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetAllUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetAllUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.UserService/GetAllUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetAllUser(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.UserService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.UserService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.UserService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.UserService/RefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RefreshToken(ctx, req.(*RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UploadImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServiceServer).UploadImage(&userServiceUploadImageServer{stream})
}

type UserService_UploadImageServer interface {
	SendAndClose(*UploadImageResponse) error
	Recv() (*UploadImageRequest, error)
	grpc.ServerStream
}

type userServiceUploadImageServer struct {
	grpc.ServerStream
}

func (x *userServiceUploadImageServer) SendAndClose(m *UploadImageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userServiceUploadImageServer) Recv() (*UploadImageRequest, error) {
	m := new(UploadImageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignIn",
			Handler:    _UserService_SignIn_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _UserService_AddUser_Handler,
		},
		{
			MethodName: "GetAllUser",
			Handler:    _UserService_GetAllUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UserService_GetUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserService_DeleteUser_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _UserService_RefreshToken_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadImage",
			Handler:       _UserService_UploadImage_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "protocol/serviceServer.proto",
}

// ParkingServiceClient is the client API for ParkingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ParkingServiceClient interface {
	AddParkingLot(ctx context.Context, in *CreateParkingLotRequest, opts ...grpc.CallOption) (*CreateParkingLotResponse, error)
	GetAllParkingLot(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAllParkingLotsResponse, error)
	GetParkingLot(ctx context.Context, in *GetParkingLotRequest, opts ...grpc.CallOption) (*GetParkingLotResponse, error)
	UpdateParkingLot(ctx context.Context, in *UpdateParkingLotRequest, opts ...grpc.CallOption) (*UpdateParkingLotResponse, error)
	DeleteParkingLot(ctx context.Context, in *DeleteParkingLotRequest, opts ...grpc.CallOption) (*Empty, error)
}

type parkingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewParkingServiceClient(cc grpc.ClientConnInterface) ParkingServiceClient {
	return &parkingServiceClient{cc}
}

func (c *parkingServiceClient) AddParkingLot(ctx context.Context, in *CreateParkingLotRequest, opts ...grpc.CallOption) (*CreateParkingLotResponse, error) {
	out := new(CreateParkingLotResponse)
	err := c.cc.Invoke(ctx, "/protobuf.ParkingService/AddParkingLot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkingServiceClient) GetAllParkingLot(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAllParkingLotsResponse, error) {
	out := new(GetAllParkingLotsResponse)
	err := c.cc.Invoke(ctx, "/protobuf.ParkingService/GetAllParkingLot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkingServiceClient) GetParkingLot(ctx context.Context, in *GetParkingLotRequest, opts ...grpc.CallOption) (*GetParkingLotResponse, error) {
	out := new(GetParkingLotResponse)
	err := c.cc.Invoke(ctx, "/protobuf.ParkingService/GetParkingLot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkingServiceClient) UpdateParkingLot(ctx context.Context, in *UpdateParkingLotRequest, opts ...grpc.CallOption) (*UpdateParkingLotResponse, error) {
	out := new(UpdateParkingLotResponse)
	err := c.cc.Invoke(ctx, "/protobuf.ParkingService/UpdateParkingLot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkingServiceClient) DeleteParkingLot(ctx context.Context, in *DeleteParkingLotRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protobuf.ParkingService/DeleteParkingLot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ParkingServiceServer is the server API for ParkingService service.
// All implementations must embed UnimplementedParkingServiceServer
// for forward compatibility
type ParkingServiceServer interface {
	AddParkingLot(context.Context, *CreateParkingLotRequest) (*CreateParkingLotResponse, error)
	GetAllParkingLot(context.Context, *Empty) (*GetAllParkingLotsResponse, error)
	GetParkingLot(context.Context, *GetParkingLotRequest) (*GetParkingLotResponse, error)
	UpdateParkingLot(context.Context, *UpdateParkingLotRequest) (*UpdateParkingLotResponse, error)
	DeleteParkingLot(context.Context, *DeleteParkingLotRequest) (*Empty, error)
	mustEmbedUnimplementedParkingServiceServer()
}

// UnimplementedParkingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedParkingServiceServer struct {
}

func (UnimplementedParkingServiceServer) AddParkingLot(context.Context, *CreateParkingLotRequest) (*CreateParkingLotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddParkingLot not implemented")
}
func (UnimplementedParkingServiceServer) GetAllParkingLot(context.Context, *Empty) (*GetAllParkingLotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllParkingLot not implemented")
}
func (UnimplementedParkingServiceServer) GetParkingLot(context.Context, *GetParkingLotRequest) (*GetParkingLotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParkingLot not implemented")
}
func (UnimplementedParkingServiceServer) UpdateParkingLot(context.Context, *UpdateParkingLotRequest) (*UpdateParkingLotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParkingLot not implemented")
}
func (UnimplementedParkingServiceServer) DeleteParkingLot(context.Context, *DeleteParkingLotRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteParkingLot not implemented")
}
func (UnimplementedParkingServiceServer) mustEmbedUnimplementedParkingServiceServer() {}

// UnsafeParkingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ParkingServiceServer will
// result in compilation errors.
type UnsafeParkingServiceServer interface {
	mustEmbedUnimplementedParkingServiceServer()
}

func RegisterParkingServiceServer(s grpc.ServiceRegistrar, srv ParkingServiceServer) {
	s.RegisterService(&ParkingService_ServiceDesc, srv)
}

func _ParkingService_AddParkingLot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateParkingLotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingServiceServer).AddParkingLot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.ParkingService/AddParkingLot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingServiceServer).AddParkingLot(ctx, req.(*CreateParkingLotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkingService_GetAllParkingLot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingServiceServer).GetAllParkingLot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.ParkingService/GetAllParkingLot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingServiceServer).GetAllParkingLot(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkingService_GetParkingLot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetParkingLotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingServiceServer).GetParkingLot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.ParkingService/GetParkingLot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingServiceServer).GetParkingLot(ctx, req.(*GetParkingLotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkingService_UpdateParkingLot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateParkingLotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingServiceServer).UpdateParkingLot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.ParkingService/UpdateParkingLot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingServiceServer).UpdateParkingLot(ctx, req.(*UpdateParkingLotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkingService_DeleteParkingLot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteParkingLotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingServiceServer).DeleteParkingLot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.ParkingService/DeleteParkingLot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingServiceServer).DeleteParkingLot(ctx, req.(*DeleteParkingLotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ParkingService_ServiceDesc is the grpc.ServiceDesc for ParkingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ParkingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.ParkingService",
	HandlerType: (*ParkingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddParkingLot",
			Handler:    _ParkingService_AddParkingLot_Handler,
		},
		{
			MethodName: "GetAllParkingLot",
			Handler:    _ParkingService_GetAllParkingLot_Handler,
		},
		{
			MethodName: "GetParkingLot",
			Handler:    _ParkingService_GetParkingLot_Handler,
		},
		{
			MethodName: "UpdateParkingLot",
			Handler:    _ParkingService_UpdateParkingLot_Handler,
		},
		{
			MethodName: "DeleteParkingLot",
			Handler:    _ParkingService_DeleteParkingLot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol/serviceServer.proto",
}
